<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
	
	<!-- 시큐리티가 적용되지 않는 요청 경로(정적 요청)를 설정 -->
	<!-- resources아래 있는 요청은 sequrity=none을 이용해 시큐리티를 적용하지 말아라 -->
	<security:http pattern="/resources/**" security="none"></security:http>
	
	<!-- 시큐리티 필터 체인을 구성 -->
	<security:http>
		<!-- 폼 인증 방식 선택 -->
		<!-- username-parameter form의 id입력의 name -->
		<!-- userpassword-parameter form의 password입력의 name -->
		<!-- login-processing-url : 로그인을 처리하는 경로 -->
		<!-- authentication-success-handler-ref : 로그인이 성공했을 때 실행하는 객체 -->
		<!-- authentication-success-handler-ref : 로그인이 실패했을 때 실행하는 객체 -->
		<security:form-login 
			login-page="/ch17/loginForm"
			username-parameter="mid"
			password-parameter="mpassword"
			login-processing-url="/login"
			authentication-success-handler-ref="ch17AuthenticationSuccessHandler"
			authentication-failure-handler-ref="ch17AuthenticationFailureHandler" />
		
			<!-- 로그아웃 설정 -->	
			<security:logout 
				logout-url="/logout"
				success-handler-ref="ch17LogoutSuccessHandeler"/>
				
			<!-- 사이트간 요청 위조 방지 비활성화 -->
			<security:csrf disabled="true"/>
			
			<!-- 권한이 불충분할 경우 이동할 경로 -->
			<!-- 로그인이 안되어 있을 경우: 로그인 폼으로 이동 --> 
			<!-- 현재 로그인된 사용자가 권한 불충분일 경우 이동할 경로 설정-->
			<security:access-denied-handler error-page="/ch17/error403"/>
		</security:http>
		
		<!-- @Secured를 사용하기 위한 설정 -->
		<!-- 
		pom.xml:  
			<dependency>
		      <groupId>org.aspectj</groupId>
		      <artifactId>aspectjweaver</artifactId>
		      <version>1.9.19</version>
		      <scope>runtime</scope>
		   	</dependency>
		   
	   ch14_aop.xml:
			<aop:aspectj-autoproxy/>
		-->
		<security:global-method-security secured-annotations="enabled"/>
		
		<bean id="ch17AuthenticationSuccessHandler"
			class="com.mycompany.springframework.security.Ch17AuthenticationSuccessHandler"/>
			
		<bean id="ch17AuthenticationFailureHandler"
			class="com.mycompany.springframework.security.Ch17AuthenticationFailureHandler"/>
		
		<bean id="ch17LogoutSuccessHandeler"
			class="com.mycompany.springframework.security.Ch17LogoutSuccessHandeler"/>
		
		<!-- ▲ 로그인 로그아웃 할 때 ㅐ어떻게 할 것 인지에 대한 설정 -->
		<!-- ================================================================================================================= -->
		<!-- ▼ 데이터 배이스에서 가져올 때 어떻게 가지고 올것인지에 대한 설정  -->
			
		<!-- 값을 비교해서 로그인 성공 실패를 관리해준다. -->
		<security:authentication-manager>
			<!-- ref : 관리객체의 참조 아이디 -->
			<!-- 데이터베이스에서 값을 읽고 제공해주는 역할 -->
			<security:authentication-provider ref="daoAuthenticationProvider"/>
		</security:authentication-manager>
		
		<bean id="daoAuthenticationProvider"
			class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
			<!-- 역할 : db에서 데이터(사용자)를 가지고 온다. -->
			<property name="userDetailsService" ref="ch17UserDetailService"/>
			<!-- authoritiesMapper => 권한에 대한 정보를 가지고 오는 겍체 -->
			<property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper"/>
		</bean>
		
		<bean id="roleHierarchyAuthoritiesMapper"	
			class="org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper">
			<constructor-arg ref="roleHierarchyImpl"/>
		</bean>
		
		<bean id="roleHierarchyImpl"
			class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
			<property name="hierarchy">
				<value>
					ROLE_ADMIN > ROLE_MANAGER
					ROLE_MANAGER > ROLE_USER
				</value>	
			</property>	
		</bean>
		
</beans>

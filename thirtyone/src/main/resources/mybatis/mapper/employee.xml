<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.oti.thirtyone.dao.EmployeesDao">

	<select id="selectByEmpId" parameterType="String" resultType="Employee">
		select e.emp_id, e.emp_number, e.emp_password, e.emp_name, e.emp_email, e.emp_gender, e.emp_birth, e.emp_postal,
			e.emp_address, e.emp_detail_address, e.emp_tel, e.emp_image_name, e.emp_image_data, e.emp_image_type,
			e.emp_state, e.emp_hiredate, e.emp_resignation_date, e.emp_role, e.emp_memo, e.dept_id, e.position, d.dept_name
		from employees e left outer join departments d on e.dept_id = d.dept_id
		where e.emp_id=#{empId}
	</select>
	
	<select id="selectEmpInfoByeEmpNum" parameterType="int" resultType="Employee">
		select emp_id, emp_number, emp_password, emp_name, emp_email, emp_gender, emp_birth, emp_postal,
			emp_address, emp_detail_address, emp_tel, emp_image_name, emp_image_data, emp_image_type,
			emp_state, emp_hiredate, emp_resignation_date, emp_role, emp_memo, dept_id, position
		from employees
		where emp_number=#{empNum}
	</select>
	
	
	<insert id="insertEmp" parameterType="Employee">
		insert into employees ( 
		emp_id, emp_number, emp_password, emp_name, emp_email, emp_gender, emp_birth, emp_postal,
			emp_address, emp_detail_address, emp_tel, emp_image_name, emp_image_data, emp_image_type,
			emp_state, emp_hiredate, emp_role, dept_id, position )
		values (
		#{empId}, #{empNumber}, #{empPassword}, #{empName}, #{empEmail}, #{empGender}, #{empBirth}, #{empPostal},
			#{empAddress}, #{empDetailAddress}, #{empTel}, #{empImageName}, #{empImageData}, #{empImageType},
			'재직', sysdate, 'ROLE_USER', #{deptId}, #{position} )
	</insert>
	
	<select id="selectDeptId" parameterType="String" resultType="int">
		select dept_id
		from employees
		where emp_id=#{empId}
	</select>
	
	<update id="updateEmpPw" parameterType="map">
		update employees set 
			emp_password = #{empPassword}
		where emp_id = #{empId}
	</update>
	
	<update id="updateEmpInfoByEmp" parameterType="Employee">
		update employees set
			emp_email = #{empEmail}, emp_postal = #{empPostal}, emp_address = #{empAddress},
			emp_detail_address=#{empDetailAddress}, emp_tel = #{empTel}
		where emp_id=#{empId}			
	</update>
	
	<update id="updateEmpInfoByAdmin" parameterType="Employee">
		update employees set
			emp_name = #{empName}, dept_id = #{deptId}, position=#{position},
			emp_memo = #{empMemo}, emp_state=#{empState},
			emp_image_data = #{empImageData}, emp_image_name=#{empImageName},
			emp_image_type = #{empImageType}
		where emp_id=#{empId}			
	</update>
	
	<select id="selectEmpList" parameterType="Pager" resultType="Employee">
		<![CDATA[
			select emp_id, emp_name, position, emp_hiredate, dept_id, emp_email, emp_tel
			from (
				select rownum as rnum, emp_id, emp_name, position, emp_hiredate, dept_id, emp_email, emp_tel
				from(
					select emp_id, emp_name, position, emp_hiredate, dept_id, emp_email, emp_tel
					from employees
					where emp_role='ROLE_USER' and dept_id != 999
					order by emp_number
				)
				where rownum <= #{endRowNo}			
			)
			where rnum >= #{startRowNo}	
		]]>		
	</select>
	
	<select id="selectEmpListByName" parameterType="map" resultType="Employee">
		<![CDATA[	
			select emp_id, emp_name, position, emp_hiredate, dept_id, emp_email, emp_tel
			from(
				select rownum as rnum, emp_id, emp_name, position, emp_hiredate, dept_id, emp_email, emp_tel
				from(
					select emp_id, emp_name, position, emp_hiredate, dept_id, emp_email, emp_tel
					from employees
					where emp_role='ROLE_USER' and emp_name like '%'||#{query}||'%' and dept_id != 999
					order by emp_number
					)
				where rownum <= #{pager.endRowNo}
				)
			where rnum >= #{pager.startRowNo}
		]]>
	</select>
	
	<select id="selectEmpListByDept" parameterType="map" resultType="Employee">
		<![CDATA[	
			select emp_id, emp_name, position, emp_hiredate, dept_id, emp_email, emp_tel
			from(
				select rownum as rnum, emp_id, emp_name, position, emp_hiredate, dept_id, emp_email, emp_tel
				from(
					select e.emp_id, e.emp_name, e.position, e.emp_hiredate, e.dept_id, e.emp_email, e.emp_tel
					from employees e join departments d 
					on e.dept_id = d.dept_id
					where e.emp_role='ROLE_USER' and d.dept_name like '%'||#{query}||'%' and d.dept_id != 999
					order by e.emp_number
					)
				where rownum <= #{pager.endRowNo}
				)
			where rnum >= #{pager.startRowNo}
		]]>
	</select>
	
	<select id="selectEmpListByPos" parameterType="map" resultType="Employee">
		<![CDATA[	
			select emp_id, emp_name, position, emp_hiredate, dept_id, emp_email, emp_tel
			from(
				select rownum as rnum, emp_id, emp_name, position, emp_hiredate, dept_id, emp_email, emp_tel
				from(
					select emp_id, emp_name, position, emp_hiredate, dept_id, emp_email, emp_tel
					from employees
					where emp_role='ROLE_USER' and position like '%'||#{query}||'%' and dept_id != 999
					order by emp_number
					)
				where rownum <= #{pager.endRowNo}
				)
			where rnum >= #{pager.startRowNo}
		]]>
	</select>
		
	<select id="countRows" parameterType="int">
		select COUNT (emp_id)
		from employees
		where emp_role='ROLE_USER'
	</select>
	
	<select id="countRowsByName" parameterType="String" resultType="int">
		select count(emp_id)
		from employees
		where emp_role='ROLE_USER' and emp_name like '%'||#{query}||'%'
	</select>
	
	<select id="countRowsByPos" parameterType="String" resultType="int">
		select count(emp_id)
		from employees
		where emp_role='ROLE_USER' and position like '%'||#{query}||'%'		
	</select>
	
	<select id="countRowsByDept" parameterType="String" resultType="int">
		select count(e.emp_id)
		from employees e join departments d 
		on e.dept_id = d.dept_id
		where e.emp_role='ROLE_USER' and d.dept_name like '%'||#{query}||'%'
	</select>
	
	<select id="countRowsByDeptId" parameterType="int" resultType="int">
		select count(emp_id)
		from employees
		where emp_role='ROLE_USER' and dept_id = #{deptId}
	</select>
	
	<update id="updateEmpDept">
		update employees
		set dept_id = #{deptId}
		where emp_id = #{empId}
	</update>
	
	<select id="selectEmployeesByDeptId" parameterType="int" resultType="Employee">
		<![CDATA[
			SELECT
				emp_id,
				emp_number,
				emp_password,
				emp_name,
				emp_email,
				emp_gender,
				emp_birth,
				emp_postal,
				emp_address,
				emp_detail_address,
				emp_tel,
				emp_image_name,
				emp_image_data,
				emp_image_type,
				emp_state,
				emp_hiredate,
				emp_resignation_date,
				emp_role,
				emp_memo,
				dept_id,
				position,
				position_class
			FROM 
				EMPLOYEES 
				LEFT OUTER JOIN POSITIONS USING(position)
			WHERE dept_id = #{deptId}
			ORDER BY position_class
		]]>
	</select>

	<update id="updateEmpPosAll">
		update employees
		set position = #{posName}
		where position = #{prePos}
	</update>
	
	<select id="selectEmpInfoByName" parameterType="String" resultType="Employee">
		select emp_number
		from employees
		where emp_name=#{empName}	
	</select>
	
	<select id="selectEmpInfoByKeyword" parameterType="String" resultType="Employee">
	    select 
	        e.emp_id, e.emp_number, e.emp_password, e.emp_name, e.emp_email, e.emp_gender, e.emp_birth,
	        e.emp_postal, e.emp_address, e.emp_detail_address, e.emp_tel, e.emp_image_name,
	        e.emp_image_data, e.emp_image_type, e.emp_state, e.emp_hiredate, e.emp_resignation_date,
	        e.emp_role, e.emp_memo, e.dept_id, e.position, d.dept_name
	    from employees e 
	    left outer join departments d on e.dept_id = d.dept_id
	    where e.emp_name like CONCAT(CONCAT('%', #{keyword}), '%')
	</select>
	
	<select id="selectLatestEmpNumber" resultType="int">
		select max(emp_number)
		from employees
	</select>
	
	<select id="selectEmpAllByDeptId" parameterType="Employee">
		<![CDATA[
			select emp_id, emp_name, dept_id, position
				from(
					select rownum as rnum, emp_id, emp_name, dept_id, position
					from (
						select emp_id, emp_name, dept_id, position
						from employees
						where dept_id = #{emp.deptId} and emp_id != #{emp.empId}
					)
				where rownum <=#{pager.endRowNo}
				)
			where rnum >= #{pager.startRowNo}
		]]>
	</select>
	
	<select id="selectDeptEmpAll" parameterType="int" resultType="Employee">
		select emp_id, emp_name, dept_id
		from employees
		where dept_id = ${deptId}
	</select>
	<select id="selectEmpAll" resultType="Employee">
		select emp_id, emp_name, dept_id
		from employees
	</select>
	
	<select id="selectEmpInfoHead" resultType="Employee">
		select rownum, emp_id, emp_name, dept_id, position
		from employees
		where rownum &lt;= 6 and position='부장' and dept_id != 999
	</select>
	
	<select id="getEmployeesByPosition" parameterType="map" resultType="Employee">
        SELECT * FROM EMPLOYEES WHERE POSITION = #{position}
        AND DEPT_ID = #{deptId}
    </select>
    
    <select id="selectAllEmployees" resultType="Employee">
    	SELECT e.*, d.dept_name FROM EMPLOYEES e LEFT OUTER JOIN DEPARTMENTS d ON e.dept_id = d.dept_id 
    </select>
    
    <select id="getEmployeesIfAbsence" resultType="String">
    	select emp_id 
		from employees
		WHERE emp_id NOT IN (
		    SELECT a.emp_id 
		    FROM attendances a
		    WHERE TO_CHAR(a.atd_date, 'yyyy-mm-dd') = TO_CHAR(SYSDATE, 'yyyy-mm-dd')
		)

    </select>
    <select id="selectEmployeeListByEmpIds" parameterType="java.util.List" resultType="Employee">
    	<![CDATA[
    		SELECT
    			e.emp_id,
    			e.emp_number,
    			e.emp_name,
    			e.emp_gender,
    			e.emp_birth,
    			e.emp_postal,
    			e.emp_address,
    			e.emp_detail_address,
    			e.emp_tel,
    			e.emp_state,
    			e.emp_resignation_date,
    			e.emp_role,
    			e.emp_memo,
    			e.dept_id,
    			e.position,
    			d.dept_name,
    			a.alt_apr_emp
    		FROM EMPLOYEES e
    			LEFT OUTER JOIN DEPARTMENTS d ON e.dept_id = d.dept_id
    			LEFT OUTER JOIN ALTERNATE_APPROVER a ON e.emp_id = a.emp_id AND a.alt_apr_state = 1
    	]]>
    	<if test="list != null and list.size() > 0">
			WHERE e.emp_id IN
			<foreach collection="list" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="list == null or list.size() == 0">
			WHERE 1 = 0
		</if>
    </select>
        
    <select id="selectEmpListCheckIn" resultType="Employee">
    	select e.emp_id
    	from employees e left join attendances a
    	on e.emp_id = a.emp_id
  		AND a.atd_date >= trunc(sysdate)
  		AND a.atd_date &lt; trunc(sysdate) + 1
    	where a.emp_id is null
    </select>
    
    <select id="selectEmpListCheckOut" resultType="Employee">
    	select e.emp_id
		from employees e join attendances a
		on e.emp_id = a.emp_id
		AND a.atd_date >= trunc(sysdate)
		AND a.atd_date &lt; trunc(sysdate) + 1
		where a.check_out is null and a.atd_state not in ('휴가', '출장', '결근')
    </select>
    
    
</mapper>